unique(df$MP)
df <- df[df$MP != 'Did Not Play',]
df <- df[df$MP != 'Did Not Dress',]
df
df["2P"] <- df$FG - df$`3P`
df["2P"] <- df$FG - df$3P
df$FG = as.integer(df$FG)
str(df)
df$FGA = as.integer(df$FGA)
df$3P = as.integer(df$3P)
df$"3P" = as.integer(df$"3P")
str(df)
df$"3PA" = as.integer(df$"3PA")
df$FT = as.integer(df$FT)
df$FTA = as.integer(df$FTA)
df$ORB = as.integer(df$ORB)
df$DRB = as.integer(df$DRB)
df$AST = as.integer(df$AST)
df$STL = as.integer(df$STL)
df$BLK = as.integer(df$BLK)
df$TOV = as.integer(df$TOV)
df$PF = as.integer(df$PF)
str(df)
df$`+/-` = as.integer(df$`+/-`)
str(df)
df$MP = as.POSIXlt(df$MP, format = '%M:%S')
str(df)
library(chron)
df$MP = times(df$MP)
str(df)
df$MP = times(format(df$MP, '%M:%S')
)
str(df)
df$MP = as.character(df$MP)
str(df)
df$MP <- strftime(df$MP, format = "%M:%S")
str(df)
df$MP = times(strftime(df$MP, format = "%T"))
df$MP = times(strftime(df$MP, format = "%M:%S"))
library(lubridate)
hour(df$MP)
df$MP <- strptime(df$MP, format = "%M:%S")
hour(df$MP)
minute(df$MP)
df$MP <- minute(df$MP)
str(DF)
str(df)
df
df$`2P` <- df$FG - df$`3P`
str(df)
df$`2PA` <- df$FGA - df$`3PA`
df
df$PTS <- 2 * df$`2P` + 3 * df$`3P` + df$FT
df
df <- df[,!(df$FG,df$FGA)]
df <- df[,!(3:4)]
df
View(df)
url <- "http://www.basketball-reference.com/boxscores/201701130TOR.html"
df <- readHTMLTable(url, skip.rows = 6, as.data.frame = TRUE, which = c(1,3))
library(dplyr)
df <- bind_rows(df)
df <- df[df$MP != 'Did Not Play',]
df <- df[df$MP != 'Did Not Dress',]
df$FG = as.integer(df$FG)
df$FGA = as.integer(df$FGA)
df$"3P" = as.integer(df$"3P")
df$"3PA" = as.integer(df$"3PA")
df$FT = as.integer(df$FT)
df$FTA = as.integer(df$FTA)
df$ORB = as.integer(df$ORB)
df$DRB = as.integer(df$DRB)
df$AST = as.integer(df$AST)
df$STL = as.integer(df$STL)
df$BLK = as.integer(df$BLK)
df$TOV = as.integer(df$TOV)
df$PF = as.integer(df$PF)
df$`+/-` = as.integer(df$`+/-`)
df$MP <- strftime(df$MP, format = "%M:%S")
library(lubridate)
df$MP <- minute(df$MP)
df$`2P` <- df$FG - df$`3P`
df$`2PA` <- df$FGA - df$`3PA`
df$PTS <- 2 * df$`2P` + 3 * df$`3P` + df$FT
df
read_html("http://www.basketball-reference.com/boxscores/201701130TOR.html")
df <- readHTMLTable("http://www.basketball-reference.com/boxscores/201701130TOR.html", skip.rows = 6, as.data.frame = TRUE, which = c(1,3))
library(dplyr)
df <- bind_rows(df)
df <- df[df$MP != 'Did Not Play',]
df <- df[df$MP != 'Did Not Dress',]
df <- df[,c(1,2,3,4,6,7,9,10,12,13,15,16,17,18,19,21]
df$FG = as.integer(df$FG)
df$FGA = as.integer(df$FGA)
df$"3P" = as.integer(df$"3P")
df$"3PA" = as.integer(df$"3PA")
df$FT = as.integer(df$FT)
df$FTA = as.integer(df$FTA)
df$ORB = as.integer(df$ORB)
df$DRB = as.integer(df$DRB)
df$AST = as.integer(df$AST)
df$STL = as.integer(df$STL)
df$BLK = as.integer(df$BLK)
df$TOV = as.integer(df$TOV)
df$PF = as.integer(df$PF)
df$`+/-` = as.integer(df$`+/-`)
df$MP <- strftime(df$MP, format = "%M:%S")
library(lubridate)
df$MP <- minute(df$MP)
df$`2P` <- df$FG - df$`3P`
df$`2PA` <- df$FGA - df$`3PA`
df$PTS <- 2 * df$`2P` + 3 * df$`3P` + df$FT
df
df[
read_html("http://www.basketball-reference.com/boxscores/201701130TOR.html")
df <- readHTMLTable("http://www.basketball-reference.com/boxscores/201701130TOR.html", skip.rows = 6, as.data.frame = TRUE, which = c(1,3))
library(dplyr)
df <- bind_rows(df)
df <- df[df$MP != 'Did Not Play',]
df <- df[df$MP != 'Did Not Dress',]
df <- df[,c(1,2,3,4,6,7,9,10,12,13,15,16,17,18,19,21)]
df$FG = as.integer(df$FG)
df$FGA = as.integer(df$FGA)
df$"3P" = as.integer(df$"3P")
df$"3PA" = as.integer(df$"3PA")
df$FT = as.integer(df$FT)
df$FTA = as.integer(df$FTA)
df$ORB = as.integer(df$ORB)
df$DRB = as.integer(df$DRB)
df$AST = as.integer(df$AST)
df$STL = as.integer(df$STL)
df$BLK = as.integer(df$BLK)
df$TOV = as.integer(df$TOV)
df$PF = as.integer(df$PF)
df$`+/-` = as.integer(df$`+/-`)
df$MP <- strftime(df$MP, format = "%M:%S")
library(lubridate)
df$MP <- minute(df$MP)
df$`2P` <- df$FG - df$`3P`
df$`2PA` <- df$FGA - df$`3PA`
df$PTS <- 2 * df$`2P` + 3 * df$`3P` + df$FT]
read_html("http://www.basketball-reference.com/boxscores/201701130TOR.html")
df <- readHTMLTable("http://www.basketball-reference.com/boxscores/201701130TOR.html", skip.rows = 6, as.data.frame = TRUE, which = c(1,3))
library(dplyr)
df <- bind_rows(df)
df <- df[df$MP != 'Did Not Play',]
df <- df[df$MP != 'Did Not Dress',]
df <- df[,c(1,2,3,4,6,7,9,10,12,13,15,16,17,18,19,21)]
df$FG = as.integer(df$FG)
df$FGA = as.integer(df$FGA)
df$"3P" = as.integer(df$"3P")
df$"3PA" = as.integer(df$"3PA")
df$FT = as.integer(df$FT)
df$FTA = as.integer(df$FTA)
df$ORB = as.integer(df$ORB)
df$DRB = as.integer(df$DRB)
df$AST = as.integer(df$AST)
df$STL = as.integer(df$STL)
df$BLK = as.integer(df$BLK)
df$TOV = as.integer(df$TOV)
df$PF = as.integer(df$PF)
df$`+/-` = as.integer(df$`+/-`)
df$MP <- strftime(df$MP, format = "%M:%S")
library(lubridate)
df$MP <- minute(df$MP)
df$`2P` <- df$FG - df$`3P`
df$`2PA` <- df$FGA - df$`3PA`
df$PTS <- 2 * df$`2P` + 3 * df$`3P` + df$FT
df
df$TRB <- df$ORB + df$DRB
str(df)
minute(df$MP)
read_html("http://www.basketball-reference.com/boxscores/201701130TOR.html")
df <- readHTMLTable("http://www.basketball-reference.com/boxscores/201701130TOR.html", skip.rows = 6, as.data.frame = TRUE, which = c(1,3))
library(dplyr)
df <- bind_rows(df)
df <- df[df$MP != 'Did Not Play',]
df <- df[df$MP != 'Did Not Dress',]
df <- df[,c(1,2,3,4,6,7,9,10,12,13,15,16,17,18,19,21)]
df$FG = as.integer(df$FG)
df$FGA = as.integer(df$FGA)
df$"3P" = as.integer(df$"3P")
df$"3PA" = as.integer(df$"3PA")
df$FT = as.integer(df$FT)
df$FTA = as.integer(df$FTA)
df$ORB = as.integer(df$ORB)
df$DRB = as.integer(df$DRB)
df$AST = as.integer(df$AST)
df$STL = as.integer(df$STL)
df$BLK = as.integer(df$BLK)
df$TOV = as.integer(df$TOV)
df$PF = as.integer(df$PF)
df$`+/-` = as.integer(df$`+/-`)
df$MP <- strptime(df$MP, format = "%M:%S")
library(lubridate)
df$MP <- minute(df$MP)
df$`2P` <- df$FG - df$`3P`
df$`2PA` <- df$FGA - df$`3PA`
df$PTS <- 2 * df$`2P` + 3 * df$`3P` + df$FT
df$TRB <- df$ORB + df$DRB
df
df <- subset(df, select = -c("FG", "FGA"))
df <- subset(df, select = -c(3,4))
df
wd
wd()
mywd()
getwd()
dev.cur()
rm(list=ls())
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
install.packages("ggplot2")
install.packages("scales")
library(ggplot2)
library(scales)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd = 2)
abline(v=median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mrfow=c(2,1),mar=c(4,4,2,1))
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd = 2, lty = 2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
mgp$model
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, data = airquality)
boxplot(Ozone~Month, data = airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in NYC")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
points(x[may], y[may])
?points
points(may[Wind], may[Ozone], pch = 17, col = "blue")
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", c(17,8), c("blue","red"), c("May","Other Months"))
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May","Other Months"))
abline(v=median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma - c(0,0,2,0))
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
rm(list = ls())
setwd("C:\\Users\\mdavie\\Desktop\\Coursera\\ExData_Plotting1")
getwd()
read.table(".\\household_power_consumption", header = TRUE, sep = ";")
df <- read.table(".\\household_power_consumption.txt", header = TRUE, sep = ";")
head(df)
str(df)
df2 <- subset(df, Date = "2/1/2007" | "2/2/2007")
df2 <- subset(df, Date == "2/1/2007" | "2/2/2007")
df2 <- subset(df, Date = "2/1/2007")
df$Date <- as.Date(df$Date)
str(df)
unique(df$Date)
?as.Date
df2$Date <- as.Date(df$Date, format = "%m/%d/%Y")
head(df2)
rm(list = ls())
df <- read.table(".\\household_power_consumption.txt", header = TRUE, sep = ";")
head(df)
df$Date <- as.Date(df$Date, format = "%d/%m/%Y")
head(df)
df$Time <- strptime(df$Time, format = "%H:%M:%S")
str(df)
df$Time <- strftime(df$Time, format = "%H:%M:%S")
str(df)
df2 <- subset(df, Date == "2007-02-01" | "2007-02-02" )
df2 <- df[Date == "2007-02-01" | "2007-02-02",]
df2 <- df[df$Date == "2007-02-01" | "2007-02-02",]
df2 <- df[df$Date %in% c("2007-02-01", "2007-02-02"),]
df2 <- df[df$Date == 2007-02-01 | 2007-02-02,]
df2 <- df[df$Date %in% c(2007-02-01, 2007-02-02),]
df2 <- subset(df, Date == '2007-02-01' | '2007-02-02' )
df2 <- subset(df, Date = '2007-02-01' | '2007-02-02' )
class(df$Date)
df2 <- df[df$Date == "2007-02-01" | df$Date == "2007-02-02",]
head(df2)
str(df2)
?hist
df2$Global_active_power <- as.numeric(df2$Global_active_power)
str(df2)
head(df2)
head(df)
rm(list=ls())
df <- read.table(".\\household_power_consumption.txt", header = TRUE, sep = ";") ## read in data
df$Date <- as.Date(df$Date, format = "%d/%m/%Y")
df2 <- df[df$Date == "2007-02-01" | df$Date == "2007-02-02",]
head(df2)
hist(df2$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts), ylab = "Frequency", main = "Global Active Power")
hist(df2$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", main = "Global Active Power")
str(df2)
df$Global_active_power <- as.numeric(levels(df2$Global_active_power))[df2$Global_active_power]
df2$Global_active_power <- as.numeric(levels(df2$Global_active_power))[df2$Global_active_power]
str(df2)
df2$Global_reactive_power <- as.numeric(levels(df2$Global_reactive_power))[df2$Global_reactive_power]
df2$Voltage <- as.numeric(levels(df2$Voltage))[df2$Voltage]
df2$Global_intensity <- as.numeric(levels(df2$Global_intensity))[df2$Global_intensity]
df2$Sub_metering_1 <- as.numeric(levels(df2$Sub_metering_1))[df2$Sub_metering_1]
df2$Sub_metering_2 <- as.numeric(levels(df2$Sub_metering_2))[df2$Sub_metering_2]
str(df2)
tail(df)
tail(df2)
hist(df2$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", main = "Global Active Power")
par(mfrow = c(1,1))
hist(df2$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", main = "Global Active Power")
dev.copy(png, "plot1.png")
dev.off()
str(df2)
tail(df2)
class(df2$Date)
df2$DateTime <- paste(df$Date, df$Time, sep = " ")
df2$DateTime <- paste(df2$Date, df2$Time, sep = " ")
head(df2)
df2$DateTime <- strptime(df2$DateTime, format = "%Y-%m-%d %H:%M:%S")
class(df2$DateTime)
head(df2)
weekdays(df2[1,df2$DateTime])
df2$WD <- weekdays(df2$DateTime)
head(df2)
with(df2, plot(WD, Global_active_power))
unique(df2$Global_active_power)
is.na(df2$Global_active_power)
sum(is.na(df2$Global_active_power))
sum(is.na(df2$WD))
with(df2, plot(WD, Global_active_power))
?plot
sum(is.na(df2$DateTime))
sum(is.na(df2$Global_reactive_power))
sum(is.na(df2$Sub_metering_1))
View(df2)
with(df2, plot(Time, Global_active_power))
with(df2, plot((WD,Time), Global_active_power))
df2$WDTime <- paste(df2$WD, df$Time, sep = " ")
df2$WDTime <- paste(df2$WD, df2$Time, sep = " ")
with(df2, plot(WDTime, Global_active_power))
head(df2)
str(df2)
df2$WDTime <- strptime(df2$WDTime, format = "%a %H:%M:%S")
str(df2)
df2$WDTime <- paste(df2$WD, df2$Time, sep = " ")
?weekdays
df2$WD <- weekdays(df2$DateTime, abbreviate = TRUE)
df2$WDTime <- paste(df2$WD, df2$Time, sep = " ")
str(df2)
df2$WD <- as.factor(df2$WD)
str(df2)
with(df2, plot(WD, Global_active_power))
with(df2, plot(DateTime, Global_active_power))
with(df2, plot(DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)"))
with(df2, plot(DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
dev.copy(png, "plot2.png")
dev.off()
with(df2, plot(DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)", type = "n"))
with(df2, plot(DateTime, Global_active_power, xlab = NULL, ylab = "Global Active Power (kilowatts)", type = "n"))
with(df2, plot(DateTime, Global_active_power, xlab = FALSE, ylab = "Global Active Power (kilowatts)", type = "n"))
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
dev.copy(png, "plot2.png")
dev.off()
with(df2, plot(DateTime, Sub_metering_1, xlab = "", ylab = "Energy sub metering", type = "n"))
lines(df2$DateTime, df2$Sub_metering_1)
lines(df2$DateTime, df2$Sub_metering_2, col = "red")
lines(df2$DateTime, df2$Sub_metering_3, col = "blue")
?legend
legend("topright", legend = c("sub_metering_1","sub_metering_2","sub_metering_3"), col = c("black", "red", "blue"))
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty = c(1,1,1), col = c("black", "red", "blue"))
dev.copy(png, "plot3.png")
dev.off()
par(mfrow = c(2,2))
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
plot.new()
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
frame()
plot.new()
frame()
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
windows()
plot.new()
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
plot.new()
plot.new()
frame()
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
frame()
plot.new()
frame()
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
par(mfrow = c(2,2))
plot.new()
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
with(df2, plot(DateTime, Voltage, ylab = "Voltage", type = "n"))
lines(df2$DateTime, df2$Voltage)
with(df2, plot(DateTime, Voltage, xlab = "datetime",  ylab = "Voltage", type = "n"))
lines(df2$DateTime, df2$Voltage)
with(df2, plot(DateTime, Sub_metering_1, xlab = "", ylab = "Energy sub metering", type = "n"))
lines(df2$DateTime, df2$Sub_metering_1)
lines(df2$DateTime, df2$Sub_metering_2, col = "red")
lines(df2$DateTime, df2$Sub_metering_3, col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty = c(1,1,1), col = c("black", "red", "blue"))
with(df2, plot(DateTime, Global_reactive_power, xlab = "datetime",  ylab = "Global_reactive_power", type = "n"))
lines(df2$DateTime, df2$Global_reactive_power)
plot.new()
frame()
frame()
par(mfrow=c(2,2))
## Top Left
with(df2, plot(DateTime, Global_active_power, xlab = "", ylab = "Global Active Power", type = "n"))
lines(df2$DateTime, df2$Global_active_power)
## Top Right
with(df2, plot(DateTime, Voltage, xlab = "datetime",  ylab = "Voltage", type = "n"))
lines(df2$DateTime, df2$Voltage)
## Bottom Left
with(df2, plot(DateTime, Sub_metering_1, xlab = "", ylab = "Energy sub metering", type = "n"))
lines(df2$DateTime, df2$Sub_metering_1)
lines(df2$DateTime, df2$Sub_metering_2, col = "red")
lines(df2$DateTime, df2$Sub_metering_3, col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty = c(1,1,1), col = c("black", "red", "blue"))
## Bottom Right
with(df2, plot(DateTime, Global_reactive_power, xlab = "datetime",  ylab = "Global_reactive_power", type = "n"))
lines(df2$DateTime, df2$Global_reactive_power)
dev.copy(png, "plot4.png")
dev.off()
